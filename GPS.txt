#include <SoftwareSerial.h>
SoftwareSerial GPS_SoftSerial(4, 3);  // Create a SoftwareSerial object for GPS communication on pins 4 (RX) and 3 (TX)
TinyGPSPlus gps;  // Create a TinyGPSPlus object for parsing GPS data
volatile float minutes, seconds;
volatile int degree, secs, mins;
void setup() {
  Serial.begin(115200);  // Initialize serial communication with a baud rate of 115200
  GPS_SoftSerial.begin(9600);  // Initialize software serial communication with the GPS module at 9600 baud
}
void loop() {
  smartDelay(1000);  // A function to manage serial communication and data parsing
 unsigned long start;
  double lat_val, lng_val, alt_m_val;
  uint8_t hr_val, min_val, sec_val;
  bool loc_valid, alt_valid, time_valid;
  // Retrieve GPS data
  lat_val = gps.location.lat();  // Get latitude data
  loc_valid = gps.location.isValid();  // Check if valid location data is available
  lng_val = gps.location.lng();  // Get longitude data
  alt_m_val = gps.altitude.meters();  // Get altitude data in meters
  alt_valid = gps.altitude.isValid();  // Check if valid altitude data is available
  hr_val = gps.time.hour();  // Get hour
  min_val = gps.time.minute();  // Get minutes
  sec_val = gps.time.second();  // Get seconds
  time_valid = gps.time.isValid();  // Check if valid time data is available
  // Display GPS data
  if (!loc_valid) {
    Serial.print("Latitude : *****\n");
    Serial.print("Longitude : *****\n");
  } else {
    DegMinSec(lat_val);
    Serial.print("Latitude in Decimal Degrees : ");
    Serial.println(lat_val, 6);
    Serial.print("Latitude in Degrees Minutes Seconds : ");
    Serial.print(degree);
    Serial.print("\t");
    Serial.print(mins);
    Serial.print("\t");
    Serial.println(secs);
    DegMinSec(lng_val);  // Convert the decimal degree value into degrees minutes seconds form
    Serial.print("Longitude in Decimal Degrees : ");
    Serial.println(lng_val, 6);
    Serial.print("Longitude in Degrees Minutes Seconds : ");
    Serial.print(degree);
    Serial.print("\t");
    Serial.print(mins);
    Serial.print("\t");
    Serial.println(secs);
  }
  if (!alt_valid) {
    Serial.print("Altitude : *****\n");
  } else {
    Serial.print("Altitude : ");
    Serial.println(alt_m_val, 6);
  }
  if (!time_valid) {
    Serial.print("Time : *****\n");
  } else {
    char time_string[32];
    sprintf(time_string, "Time : %02d/%02d/%02d\n", hr_val, min_val, sec_val);
    Serial.print(time_string);
  }
}
static void smartDelay(unsigned long ms) {
  unsigned long start = millis();
  do {
    while (GPS_SoftSerial.available()) {
      gps.encode(GPS_SoftSerial.read());  // Parse GPS data from the software serial
    }
  } while (millis() - start < ms);
}
void DegMinSec(double tot_val) {
  degree = (int)tot_val;
  minutes = tot_val - degree;
  seconds = 60 * minutes;
  minutes = (int)seconds;
  mins = (int)minutes;
  seconds = seconds - minutes;
  seconds = 60 * seconds;
  secs = (int)seconds;
}
